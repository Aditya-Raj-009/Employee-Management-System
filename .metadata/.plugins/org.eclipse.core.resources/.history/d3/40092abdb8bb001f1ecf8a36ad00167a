package com.employee.main.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.employee.main.Repository.EmployeeRepository;
import com.employee.main.Responses.DeleteResponse;
import com.employee.main.dto.EmployeeDTO;
import com.employee.main.entities.Employee;
import com.employee.main.exception.EmployeeResourceNotFoundException;
import com.employee.main.mapper.EmployeeMapper;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class EmployeeServiceImplementation implements EmployeeService {

	private EmployeeRepository employeeRepository;
	
	@Override
	public EmployeeDTO createNewEmployee(EmployeeDTO empDto) {
	   
	    Employee newEmployee = EmployeeMapper.mapToEmployee(empDto);

	    newEmployee.setId(0); // Optional, as Hibernate ignores IDs for @GeneratedValue

	    Employee savedEmployee = employeeRepository.save(newEmployee);

	    return EmployeeMapper.mapToEmployeeDto(savedEmployee);
	}

	@Override
	public List<EmployeeDTO> getAllEmployees() {
		List<Employee> allEmployees = employeeRepository.findAll();
		return allEmployees.stream().map
				(e->EmployeeMapper.mapToEmployeeDto(e)).collect(Collectors.toList());
	}

	@Override
	public EmployeeDTO getEmployeeById(Long empId) {
		
		Employee getEmp = employeeRepository.findById(empId).orElseThrow(()->
		new EmployeeResourceNotFoundException("Employee not found with given id "+empId));
		return EmployeeMapper.mapToEmployeeDto(getEmp);
	}

	@Override
	public DeleteResponse deleteEmployeeById(long empId) {
		EmployeeDTO emp = getEmployeeById(empId);
		employeeRepository.deleteById(empId);
		DeleteResponse delete = new DeleteResponse();
		delete.setEmpDto(emp);
		
		return delete;
	}
	
	

	
	

	
}
